@use 'sass:map';

// Responsive Breakpoints - Mobile First Approach
// ==============================================

// Breakpoint values (following your specifications)
$breakpoints: (
  xs: 320px,      // Teléfonos muy pequeños
  sm: 375px,      // Teléfonos estándar (iPhone X, 12...)
  md: 414px,      // Teléfonos grandes (Plus, Pro Max)
  lg: 768px,      // Tablets vertical
  xl: 1024px,     // Tablets horizontal / laptops chicos
  xxl: 1280px,    // Laptops normales
  xxxl: 1440px    // Laptops grandes / escritorio estándar
);

// Media Query Mixins - Mobile First (min-width)
// ==============================================

@mixin respond-above($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Convenience mixins for specific breakpoints
@mixin mobile-xs {
  // Base styles - no media query needed (mobile first)
  @content;
}

@mixin mobile-sm {
  @include respond-above(sm) {
    @content;
  }
}

@mixin mobile-md {
  @include respond-above(md) {
    @content;
  }
}

@mixin tablet {
  @include respond-above(lg) {
    @content;
  }
}

@mixin tablet-landscape {
  @include respond-above(xl) {
    @content;
  }
}

@mixin desktop {
  @include respond-above(xxl) {
    @content;
  }
}

@mixin desktop-large {
  @include respond-above(xxxl) {
    @content;
  }
}

// Between breakpoints (for specific ranges)
@mixin respond-between($lower, $upper) {
  @if map.has-key($breakpoints, $lower) and map.has-key($breakpoints, $upper) {
    @media (min-width: map.get($breakpoints, $lower)) and (max-width: #{map.get($breakpoints, $upper) - 1px}) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint range: #{$lower} to #{$upper}";
  }
}

// Only mobile devices (up to tablet)
@mixin mobile-only {
  @media (max-width: #{map.get($breakpoints, lg) - 1px}) {
    @content;
  }
}

// Only tablet devices
@mixin tablet-only {
  @include respond-between(lg, xl) {
    @content;
  }
}

// Only desktop devices
@mixin desktop-only {
  @include respond-above(xl) {
    @content;
  }
}

// Fluid Typography Mixin
// ======================
@mixin fluid-type($min-font-size, $max-font-size, $min-vw: 320px, $max-vw: 1440px) {
  font-size: #{$min-font-size}rem;
  
  @media (min-width: $min-vw) and (max-width: $max-vw) {
    font-size: calc(#{$min-font-size}rem + #{$max-font-size - $min-font-size} * ((100vw - #{$min-vw}) / #{$max-vw - $min-vw}));
  }
  
  @media (min-width: $max-vw) {
    font-size: #{$max-font-size}rem;
  }
}

// Container Queries Support (Future-proofing)
// ===========================================
@mixin container-query($condition) {
  @container #{$condition} {
    @content;
  }
}

// Responsive Grid Helper
// ======================
@mixin responsive-grid($mobile-cols: 1, $tablet-cols: 2, $desktop-cols: 3) {
  display: grid;
  gap: 1rem;
  grid-template-columns: repeat($mobile-cols, 1fr);
  
  @include tablet {
    grid-template-columns: repeat($tablet-cols, 1fr);
    gap: 1.5rem;
  }
  
  @include desktop {
    grid-template-columns: repeat($desktop-cols, 1fr);
    gap: 2rem;
  }
}

// Responsive Spacing
// ==================
@mixin responsive-spacing($property, $mobile-value, $tablet-value: null, $desktop-value: null) {
  #{$property}: #{$mobile-value}rem;
  
  @if $tablet-value {
    @include tablet {
      #{$property}: #{$tablet-value}rem;
    }
  }
  
  @if $desktop-value {
    @include desktop {
      #{$property}: #{$desktop-value}rem;
    }
  }
}

// Touch-friendly sizes
// ===================
@mixin touch-target($min-size: 44px) {
  min-height: $min-size;
  min-width: $min-size;
  
  @include tablet {
    min-height: #{$min-size * 0.9};
    min-width: #{$min-size * 0.9};
  }
}
